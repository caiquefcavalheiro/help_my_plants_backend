openapi: 3.0.3
info:
  title: Help My Plants - API
  version: 1.0.0
  description: |-
    Nesse projeto backend é possível adicionar e logar usuários
         e possiu duas estruturas de crud para plants e userPlants
paths:
  /login:
    post:
      operationId: login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /plants:
    get:
      operationId: plants_list
      tags:
      - plants
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plant'
          description: ''
    post:
      operationId: plants_create
      tags:
      - plants
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Plant'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Plant'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Plant'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plant'
          description: ''
  /plants/{id}:
    get:
      operationId: plants_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - plants
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plant'
          description: ''
    put:
      operationId: plants_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - plants
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Plant'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Plant'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Plant'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plant'
          description: ''
    patch:
      operationId: plants_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - plants
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPlant'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPlant'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPlant'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plant'
          description: ''
    delete:
      operationId: plants_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - plants
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /userPlants:
    post:
      operationId: userPlants_create
      tags:
      - userPlants
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPlant'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserPlant'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserPlant'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPlant'
          description: ''
  /userPlants/:
    get:
      operationId: userPlants_list
      tags:
      - userPlants
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserPlant'
          description: ''
  /userPlants/{id}:
    put:
      operationId: userPlants_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - userPlants
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPlant'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserPlant'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserPlant'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPlant'
          description: ''
    patch:
      operationId: userPlants_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - userPlants
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserPlant'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserPlant'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserPlant'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPlant'
          description: ''
    delete:
      operationId: userPlants_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - userPlants
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /users:
    get:
      operationId: users_list
      tags:
      - users
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: users_create
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /users/{id}:
    get:
      operationId: users_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: users_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: users_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: users_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    InterestEnum:
      enum:
      - Hobby
      - Profissional
      - Estudante
      type: string
    Limit:
      type: object
      properties:
        max:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        min:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
      required:
      - max
      - min
    PatchedPlant:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 40
        cientific_name:
          type: string
          maxLength: 50
        water:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        temperature:
          $ref: '#/components/schemas/Limit'
        lighting:
          $ref: '#/components/schemas/Limit'
        height:
          $ref: '#/components/schemas/Limit'
        info:
          type: string
          maxLength: 500
        image:
          type: string
          maxLength: 200
    PatchedUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
        email:
          type: string
          format: email
          maxLength: 254
        interest:
          $ref: '#/components/schemas/InterestEnum'
        password:
          type: string
          writeOnly: true
          maxLength: 128
    PatchedUserPlant:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        userId:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 40
        cientific_name:
          type: string
          maxLength: 50
        water:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        info:
          type: string
          maxLength: 500
        image:
          type: string
          maxLength: 200
        reminder:
          type: string
          maxLength: 50
        surname:
          type: string
          maxLength: 50
        last_watering:
          type: string
          format: date-time
          nullable: true
        temperature:
          $ref: '#/components/schemas/Limit'
        lighting:
          $ref: '#/components/schemas/Limit'
        height:
          $ref: '#/components/schemas/Limit'
        details:
          type: string
          maxLength: 50
    Plant:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 40
        cientific_name:
          type: string
          maxLength: 50
        water:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        temperature:
          $ref: '#/components/schemas/Limit'
        lighting:
          $ref: '#/components/schemas/Limit'
        height:
          $ref: '#/components/schemas/Limit'
        info:
          type: string
          maxLength: 500
        image:
          type: string
          maxLength: 200
      required:
      - cientific_name
      - height
      - id
      - image
      - info
      - lighting
      - name
      - temperature
      - water
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - email
      - password
      - refresh
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
        email:
          type: string
          format: email
          maxLength: 254
        interest:
          $ref: '#/components/schemas/InterestEnum'
        password:
          type: string
          writeOnly: true
          maxLength: 128
      required:
      - email
      - id
      - interest
      - name
      - password
    UserPlant:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        userId:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 40
        cientific_name:
          type: string
          maxLength: 50
        water:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        info:
          type: string
          maxLength: 500
        image:
          type: string
          maxLength: 200
        reminder:
          type: string
          maxLength: 50
        surname:
          type: string
          maxLength: 50
        last_watering:
          type: string
          format: date-time
          nullable: true
        temperature:
          $ref: '#/components/schemas/Limit'
        lighting:
          $ref: '#/components/schemas/Limit'
        height:
          $ref: '#/components/schemas/Limit'
        details:
          type: string
          maxLength: 50
      required:
      - cientific_name
      - height
      - id
      - image
      - info
      - lighting
      - name
      - temperature
      - userId
      - water
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
